// namespace Questions = 
//     // let total  = 0
//     function getTotalUsers(total : int)  = 
//         total += 1
payable contract Quiz = 

// Declaring types
    type i =  int
    type s = string
    type a =  address
    type b = bool

// Record to store a user
    record user = {
        id : i,
        owner : a,
        name : s,
        email : s,
        score : i,
        password : s,
        takenCourse : b}

    record highScore ={
        id : i,
        owner : a,
        score : i,
        ownerName : s}

    record state = {
        // Mapping users to an int
        usersById : map(i,user),

        // mapping users who have completed a quiz
        scores : map(i,highScore),

        // mapping users to a string
        usersByName : map(s,user),
        
        // total amount of users
        total : i,
        totalScores : i}



    entrypoint init() ={usersById = {}, scores = {}, usersByName = {}, total =0, totalScores = 0}


    // returns total number of users
    entrypoint getTotalUsers() =
        state.total


    // get total of high score users
    entrypoint getTotalScores() =
        state.totalScores


    // Register to take the quiz
    stateful entrypoint addUser(_name,_email,_password) =
    

        let newUser = {
            owner = Call.caller,
            id = getTotalUsers()+1, 
            name = _name,
            email = _email,
            password = _password,
            score  = 0 ,
            takenCourse = false}


        let index = getTotalUsers() + 1

        let owner = Call.caller
        put(state{usersById[index] = newUser, usersByName[_name] = newUser, total = index})

    // Get a user by id
    entrypoint getUser(id : i) =
        switch(Map.lookup(id, state.usersById))
            None => abort("invalid username or password")
            Some(x) => x

    // get a user by Name
    entrypoint getUserByName(userName : s) =
        switch(Map.lookup(userName, state.usersByName))
            None => abort("invalid user")
            Some(x) => x


    // Update the users score
    stateful entrypoint updateScore( index : i, _score : i) =
        
        let user = getUser(index)
        let name = user.name
        let score = user.score
        require(score == 0, "Score has already been updated")
        
        require(!user.takenCourse  == false , "You cannot take course more that once" )
        put(state{usersById[index].score = _score, usersByName[name].score = _score })

        let newScore = {
            id = getTotalScores(),
            owner = user.owner,
            score = _score,
            ownerName = name }
        put(state{scores[index] = newScore})



    // Allows users to take the quiz
    stateful entrypoint takeCourse(index : i) =
        
        let user = getUser(index)
        require(user.takenCourse  == false, "You cannot take course more that once" )
        let name = user.name
       
        let userAddress = Call.caller
        let index = getTotalScores()+1

        put(state{usersById[index].takenCourse = true , usersByName[name].takenCourse = true, totalScores = index})


       
        // put(state{scores})
